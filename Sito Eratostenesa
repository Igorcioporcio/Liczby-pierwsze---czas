#include <iostream>
#include <vector>
#include <chrono>
#include <functional>

using namespace std;

vector<int> sieve_of_eratosthenes(int n) {
    vector<bool> primes(n + 1, true);
    primes[0] = primes[1] = false;
    for (int i = 2; i * i <= n; ++i) {
        if (primes[i]) {
            for (int j = i * i; j <= n; j += i) {
                primes[j] = false;
            }
        }
    }
    vector<int> result;
    for (int i = 2; i <= n; ++i) {
        if (primes[i]) {
            result.push_back(i);
        }
    }
    return result;
}

pair<int, double> measure_time(function<vector<int>(int)> func, int n) {
    auto start_time = chrono::high_resolution_clock::now();

    vector<int> primes = func(n);

    auto end_time = chrono::high_resolution_clock::now();
    chrono::duration<double> elapsed_time = end_time - start_time;

    return {primes.size(), elapsed_time.count()};
}

int main() {
    vector<int> ns = {1000, 10000, 100000, 1000000};

    for (int n : ns) {
        cout << "\nWyniki dla n = " << n << ":\n";
        auto result_time = measure_time(sieve_of_eratosthenes, n);
        cout << "Sito Eratostenesa: " << result_time.first << " liczb pierwszych, Czas: " << result_time.second << " sekund\n";
    }

    return 0;
}
